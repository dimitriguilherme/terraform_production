data "aws_availability_zones" "azs" {

}
vpc_cidr    = "10.20.0.0/16"
vpc_tenancy = "default"
vpc_tags = {
  Name = "Terraform VPC"
  Env  = "Dev"
}

locals {
  bucket_name = "${var.elb_al_s3}-${terraform.workspace}"
}
resource "aws_s3_bucket" "accesslogs" {
  bucket = "${local.bucket_name}"
  acl    = "private"
  region = "${var.region}"
  policy = "${data.template_file.accesslogs.rendered}"
  tags = {
    Name        = "JavaHome"
    Environment = "${terraform.workspace}"
  }
}

data "template_file" "accesslogs" {
  template = "${file("iam/elb-s3-access-logs-policy.json")}"
  vars = {
    elb_s3_bucket_name = "${local.bucket_name}"
  }
}
# Create a new load balancer
resource "aws_elb" "javahome_elb" {
  name            = "javahome-elb"
  subnets         = "${local.pub_sub_ids}"
  security_groups = ["${aws_security_group.elb.id}"]
  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }
  access_logs {
    bucket = "${aws_s3_bucket.accesslogs.id}"
    # bucket_prefix = "javahome-elb"
    interval = 60
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "HTTP:80/index.html"
    interval            = 30
  }

  instances                   = "${aws_instance.web.*.id}"
  cross_zone_load_balancing   = true
  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 30

}


resource "aws_security_group" "elb" {
  name   = "elb_security"
  vpc_id = "${aws_vpc.my_vpc.id}"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
locals {
  az_names        = "${data.aws_availability_zones.azs.names}"
  pub_sub_ids     = "${aws_subnet.public.*.id}"
  private_sub_ids = "${aws_subnet.private.*.id}"
}
data "aws_ami" "nat" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn-ami-vpc-nat*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["amazon"]
}

resource "aws_instance" "nat" {
  ami               = "${data.aws_ami.nat.id}"
  instance_type     = "t2.micro"
  source_dest_check = false
  subnet_id         = "${local.pub_sub_ids[1]}"
  tags = {
    Name        = "JavaHomeNat"
    Environment = "${terraform.workspace}"
  }
}
# Private subnets
resource "aws_subnet" "private" {
  count      = "${length(local.az_names)}"
  vpc_id     = "${aws_vpc.my_vpc.id}"
  cidr_block = "${cidrsubnet(var.vpc_cidr, 8, length(local.az_names) + count.index)}"

  tags = {
    Name = "PrivateSubnet-${count.index + 1}-${terraform.workspace}"
  }
}

resource "aws_route_table" "private_rt" {
  vpc_id = "${aws_vpc.my_vpc.id}"

  route {
    cidr_block  = "0.0.0.0/0"
    instance_id = "${aws_instance.nat.id}"
  }

  tags = {
    Name        = "JavaHomePrivateRT"
    Environment = "${terraform.workspace}"
  }
}

resource "aws_route_table_association" "pri_rt_association" {
  count          = "${length(local.az_names)}"
  subnet_id      = "${local.private_sub_ids[count.index]}"
  route_table_id = "${aws_route_table.private_rt.id}"
}
vpc_cidr    = "10.20.0.0/16"
vpc_tenancy = "default"
vpc_tags = {
  Name = "Terraform VPC"
  Env  = "Prod"
}
resource "aws_db_subnet_group" "rds" {
  name       = "rds_subnets"
  subnet_ids = "${local.private_sub_ids}"

  tags = {
    Name = "RDS Subnets"
  }
}

resource "aws_db_instance" "javahome" {
  identifier                = "javahome-${terraform.workspace}"
  vpc_security_group_ids    = ["${aws_security_group.rds.id}"]
  allocated_storage         = 20
  storage_type              = "gp2"
  engine                    = "mysql"
  engine_version            = "5.7"
  instance_class            = "db.t2.micro"
  name                      = "jvahomedb"
  username                  = "admin"
  password                  = "${var.rds_pwd}"
  parameter_group_name      = "default.mysql5.7"
  db_subnet_group_name      = "${aws_db_subnet_group.rds.id}"
  skip_final_snapshot       = false
  final_snapshot_identifier = "javahome-we-rds"
}

resource "aws_security_group" "rds" {
  name   = "rds_security-${terraform.workspace}"
  vpc_id = "${aws_vpc.my_vpc.id}"

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
data "aws_route53_zone" "javahome" {
  name         = "javahome123.tk."
  private_zone = false
}

resource "aws_route53_record" "javahome" {
  zone_id = "${data.aws_route53_zone.javahome.zone_id}"
  name    = "javahome123.tk."
  type    = "A"
  alias {
    name                   = "${aws_elb.javahome_elb.dns_name}"
    zone_id                = "${aws_elb.javahome_elb.zone_id}"
    evaluate_target_health = false
  }
}
resource "aws_security_group" "web" {
  name   = "web_security"
  vpc_id = "${aws_vpc.my_vpc.id}"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
variable "vpc_cidr" {
  description = "Choose CIDR for VPC"
  type        = "string"
  default     = "10.0.0.0/16"
}

variable "region" {
  description = "Choose region for your stack"
  type        = "string"
  default     = "ap-south-1"
}
variable "web_instance_count" {
  description = "Choose instance count"
  type        = "string"
  default     = "2"
}

variable "web_amis" {
  type = "map"
  default = {
    ap-south-1     = "ami-0d2692b6acea72ee6"
    ap-southeast-1 = "ami-01f7527546b557442"
  }
}

variable "vpc_tenancy" {
  description = "Choose tenancy for VPC"
  type        = "string"
  default     = "default"
}

variable "vpc_tags" {
  type        = "map"
  description = "Choos tags for VPC"
  default = {
    Name  = "main"
    Batch = "Weekends"
    Year  = "2019"
  }
}

variable "rds_pwd" {
  description = "Choose RDS password"
}

variable "elb_al_s3" {
  default = "javahome-we-accesslogs"
}
provider "aws" {
  region = "${var.region}"
}
terraform {
  backend "s3" {
    bucket         = "javahome-we-789"
    key            = "javahome-app/terraform.tfstate"
    region         = "ap-south-1"
    dynamodb_table = "terraform-lock"
  }
}
resource "aws_vpc" "my_vpc" {
  cidr_block       = "${var.vpc_cidr}"
  instance_tenancy = "${var.vpc_tenancy}"

  tags = "${var.vpc_tags}"
}


resource "aws_subnet" "public" {

  count                   = "${length(local.az_names)}"
  vpc_id                  = "${aws_vpc.my_vpc.id}"
  cidr_block              = "${cidrsubnet(var.vpc_cidr, 8, count.index)}"
  map_public_ip_on_launch = true
  availability_zone       = "${local.az_names[count.index]}"
  tags = {
    Name = "Subnet-${count.index + 1}-${terraform.workspace}"
  }
}


# Create Internet Gatewway for Public subnets

resource "aws_internet_gateway" "igw" {
  vpc_id = "${aws_vpc.my_vpc.id}"

  tags = {
    Name        = "JavaHomeIGW"
    Environment = "${terraform.workspace}"
  }
}

resource "aws_route_table" "pub_rt" {
  vpc_id = "${aws_vpc.my_vpc.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.igw.id}"
  }

  tags = {
    Name        = "JavaHomePubRT"
    Environment = "${terraform.workspace}"
  }
}


# Public subnet and route table association

resource "aws_route_table_association" "pub_rt_association" {
  count          = "${length(local.az_names)}"
  subnet_id      = "${local.pub_sub_ids[count.index]}"
  route_table_id = "${aws_route_table.pub_rt.id}"
}
output "az_names" {
  value = "${local.az_names}"
}
data "aws_ami" "web" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-2.0*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["amazon"]
}

resource "aws_instance" "web" {
  count = "${var.web_instance_count}"
  # ami           = "${data.aws_ami.web.id}"
  ami                    = "${var.web_amis[var.region]}"
  instance_type          = "t2.micro"
  vpc_security_group_ids = ["${aws_security_group.web.id}"]
  user_data              = "${file("scripts/apache.sh")}"
  subnet_id              = "${local.pub_sub_ids[count.index]}"
  tags = {
    Name        = "WebApp-${count.index + 1}"
    Environment = "${terraform.workspace}"
  }
}
